{"version":3,"sources":["components/AceEditorComponent.js","actions/ResultAction.js","components/ResultRender.js","components/NavBar.js","actions/EditorAction.js","App.js","reducers/EditorReducer.js","reducers/ResultReducer.js","reducers/index.js","index.js"],"names":["AceEditorComponent","editorSettings","useSelector","state","dispatch","useDispatch","className","mode","onChange","newValue","type","payload","theme","fontSize","parseInt","placeholder","width","height","setOptions","useWorker","enableBasicAutocompletion","enableLiveAutocompletion","enableSnippets","ResultRender","result","title","srcDoc","savedText","NavBar","editorSetting","defaultValue","e","target","value","min","max","onClick","element","document","createElement","file","Blob","href","URL","createObjectURL","download","body","appendChild","click","App","initialState","EditorReducer","action","editorText","ResultReducer","rootReducer","combineReducers","store","createStore","composeWithDevTools","applyMiddleware","thunk","ReactDOM","render","getElementById"],"mappings":"mVA0CeA,MA/Bf,WACE,IAAIC,EAAiBC,aAAY,SAACC,GAAD,OAAWA,EAAMF,kBAC5CG,EAAWC,cAMjB,OACE,qBAAKC,UAAU,QAAf,SAEE,cAAC,IAAD,CACEC,KAAK,OACLC,SATW,SAACC,GAEhBL,EChBO,CAAEM,KAAM,cAAeC,QDgBNF,KAQpBG,MAAOX,EAAeW,MACtBC,SAAUC,SAASb,EAAeY,UAClCP,UAAU,YACVS,YAAY,sBACZC,MAAM,QACNC,OAAO,OACPC,WAAY,CACVC,WAAW,EACXC,2BAA2B,EAC3BC,0BAA0B,EAC1BC,gBAAgB,Q,OElBXC,MAbf,WAEI,IAAMC,EAAStB,aAAY,SAAAC,GAAK,OAAIA,EAAMqB,UAE1C,OACI,qBAAKlB,UAAU,YAAf,SACI,wBAAQA,UAAU,YAAYmB,MAAM,SAASC,OAAQF,EAAOG,e,eC4CzDC,MA9Cf,WAEI,IAAMC,EAAgB3B,aAAY,SAAAC,GAAK,OAAIA,EAAMF,kBAC3CuB,EAAStB,aAAY,SAAAC,GAAK,OAAIA,EAAMqB,UACpCpB,EAAWC,cA0BjB,OACI,sBAAKC,UAAU,SAAf,UACI,8BACI,+CAEJ,4CAEI,uBAAOI,KAAK,SAASoB,aAAcD,EAAchB,SAAUL,SApBhD,SAACuB,GACpB3B,ECjBG,CAAEM,KAAM,gBAAiBC,QDiBPoB,EAAEC,OAAOC,SAmB+DC,IAAK,GAAIC,IAAK,KACnG,wBAAQ7B,UAAU,MAAM8B,QAjBf,WACjB,IAAMC,EAAUC,SAASC,cAAc,KACjCC,EAAO,IAAIC,KAAK,CAACjB,EAAOG,WAAY,CAACjB,KAAM,eACjD2B,EAAQK,KAAOC,IAAIC,gBAAgBJ,GACnCH,EAAQQ,SAAW,aACnBP,SAASQ,KAAKC,YAAYV,GAC1BA,EAAQW,SAWA,SAA+C,cAAC,IAAD,MAC/C,wBAAQ1C,UAAU,MAAM8B,QAjChB,WACW,UAAxBP,EAAcjB,MACbR,ECfD,CAAEM,KAAM,kBDiBPN,ECbD,CAAEM,KAAM,oBD0CH,SAA8C,cAAC,IAAD,MAC9C,wBAAQJ,UAAU,MAAM8B,QA3BpB,WACZhC,EFjBG,CAAEM,KAAM,eE2CH,wBE5BDuC,MAdf,WACE,OACE,qCAEE,cAAC,EAAD,IACA,sBAAK3C,UAAU,MAAf,UACE,cAAC,EAAD,IACA,cAAC,EAAD,W,sBCbF4C,EAAe,CACjBtC,MAAO,QACPC,SAAU,IAqBCsC,EAlBO,WAAmC,IAAlChD,EAAiC,uDAAzB+C,EAAcE,EAAW,uCAEpD,OAAOA,EAAO1C,MAEV,IAAK,gBAED,OADAP,EAAK,2BAAQA,GAAR,IAAeS,MAAO,YAE/B,IAAK,iBAED,OADAT,EAAK,2BAAQA,GAAR,IAAeS,MAAO,UAE/B,IAAK,gBAED,OADAT,EAAK,2BAAQA,GAAR,IAAeU,SAAUuC,EAAOzC,UAEzC,QACI,OAAOR,ICnBb+C,EAAe,CACjBG,WAAa,GACb1B,UAAY,IAgBD2B,EAbO,WAAmC,IAAlCnD,EAAiC,uDAAzB+C,EAAcE,EAAW,uCACpD,OAAOA,EAAO1C,MACV,IAAK,cAED,OADAP,EAAK,2BAAOA,GAAP,IAAckD,WAAYD,EAAOzC,UAE1C,IAAK,YAED,OADAR,EAAK,2BAAOA,GAAP,IAAcwB,UAAWxB,EAAMkD,aAExC,QACI,OAAOlD,ICJJoD,EALKC,0BAAgB,CAChCvD,eAAgBkD,EAChB3B,OAAQ8B,I,QCING,EAAQC,sBAAYH,EAAaI,8BACrCC,0BAAgBC,OAKlBC,IAASC,OACP,cAAC,IAAD,CAAUN,MAAOA,EAAjB,SACE,cAAC,EAAD,MAEFnB,SAAS0B,eAAe,W","file":"static/js/main.628f4f30.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { useSelector, useDispatch } from \"react-redux\";\r\nimport \"../styles/AceEditorComponent.css\";\r\nimport { changeInEditor } from \"../actions/ResultAction\";\r\n//Importing AceEditor\r\nimport AceEditor from \"react-ace\";\r\nimport \"ace-builds/webpack-resolver\";\r\nimport \"ace-builds/src-noconflict/mode-html\";\r\nimport \"ace-builds/src-noconflict/theme-monokai\";\r\nimport \"ace-builds/src-noconflict/theme-xcode\";\r\n\r\nfunction AceEditorComponent() {\r\n  let editorSettings = useSelector((state) => state.editorSettings);\r\n  const dispatch = useDispatch();\r\n\r\n  const onChange = (newValue) => {\r\n    // console.log(\"Change\", newValue);\r\n    dispatch(changeInEditor(newValue));\r\n  };\r\n  return (\r\n    <div className=\"edito\">\r\n\r\n      <AceEditor\r\n        mode=\"html\"\r\n        onChange={onChange}\r\n        theme={editorSettings.theme}\r\n        fontSize={parseInt(editorSettings.fontSize)}\r\n        className=\"aceEditor\"\r\n        placeholder=\"Edit your code here\"\r\n        width=\"500px\"\r\n        height=\"90vh\"\r\n        setOptions={{\r\n          useWorker: true,\r\n          enableBasicAutocompletion: true,\r\n          enableLiveAutocompletion: true,\r\n          enableSnippets: true,\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default AceEditorComponent;\r\n","export const changeInEditor = (text) => {\r\n    return { type: \"EDITOR_TEXT\", payload: text}\r\n}\r\n\r\nexport const showResult = () => {\r\n    return { type: \"SAVE_TEXT\"}\r\n}","import React from 'react'\r\nimport { useSelector } from 'react-redux'\r\nimport \"../styles/ResultRender.css\"\r\n\r\nfunction ResultRender() {\r\n\r\n    const result = useSelector(state => state.result)\r\n\r\n    return (\r\n        <div className=\"resultDiv\">\r\n            <iframe className=\"resultBox\" title=\"Result\" srcDoc={result.savedText}>\r\n                \r\n            </iframe>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default ResultRender\r\n","import React from 'react'\r\nimport { useSelector, useDispatch } from 'react-redux';\r\nimport { showResult } from '../actions/ResultAction';\r\nimport { setDarkTheme, setLightTheme, setFontSize } from '../actions/EditorAction';\r\nimport { FaSave, FaSun} from 'react-icons/fa'\r\n\r\nimport \"../styles/NavBar.css\"\r\n\r\nfunction NavBar() {\r\n\r\n    const editorSetting = useSelector(state => state.editorSettings);\r\n    const result = useSelector(state => state.result);\r\n    const dispatch = useDispatch();\r\n\r\n    const changeTheme = () => {\r\n        if(editorSetting.theme === \"xcode\")\r\n            dispatch(setDarkTheme());\r\n        else\r\n            dispatch(setLightTheme());\r\n    }\r\n\r\n    const runCode = () => {\r\n        dispatch(showResult());\r\n    }\r\n\r\n    const changeFontSize = (e) => {\r\n        dispatch(setFontSize(e.target.value));\r\n    }\r\n\r\n    const downloadFile = () => {\r\n        const element = document.createElement(\"a\");\r\n        const file = new Blob([result.savedText], {type: 'text/plain'});\r\n        element.href = URL.createObjectURL(file);\r\n        element.download = \"myFile.txt\";\r\n        document.body.appendChild(element); // Required for this to work in FireFox\r\n        element.click();\r\n    }\r\n\r\n    return (\r\n        <div className=\"navbar\">\r\n            <div>\r\n                <h2>HTML Editor</h2>\r\n            </div>\r\n            <div>\r\n                Font Size\r\n                <input type=\"number\" defaultValue={editorSetting.fontSize} onChange={changeFontSize} min={10} max={28}/>\r\n                <button className=\"btn\" onClick={downloadFile}><FaSave/></button>\r\n                <button className=\"btn\" onClick={changeTheme}><FaSun/></button>\r\n                <button className=\"btn\" onClick={runCode}>Run</button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default NavBar\r\n","export const setDarkTheme = () => {\r\n    return { type: \"SET_DARK_MODE\" };\r\n}\r\n\r\nexport const setLightTheme = () => {\r\n    return { type: \"SET_LIGHT_MODE\" };\r\n}\r\n\r\nexport const setFontSize = (value) => {\r\n    return { type: \"SET_FONT_SIZE\", payload: value };\r\n}","import './App.css';\nimport AceEditorComponent from './components/AceEditorComponent';\nimport ResultRender from './components/ResultRender';\nimport NavBar from './components/NavBar';\n// import AceEditorComp from './components/AceEditorComp';\n\nfunction App() {\n  return (\n    <>\n    {/* <AceEditorComp/> */}\n      <NavBar/>\n      <div className=\"App\"> \n        <AceEditorComponent/>\n        <ResultRender/>\n      </div>\n    </>\n\n  );\n}\n\nexport default App;\n","const initialState = {\r\n    theme: \"xcode\",\r\n    fontSize: 12\r\n}\r\n\r\nconst EditorReducer = (state = initialState, action) => {\r\n    // console.log(action);\r\n    switch(action.type)\r\n    {\r\n        case \"SET_DARK_MODE\":\r\n            state = { ...state, theme: 'monokai'};\r\n            return state;\r\n        case \"SET_LIGHT_MODE\":\r\n            state = { ...state, theme: 'xcode'};\r\n            return state;\r\n        case \"SET_FONT_SIZE\":\r\n            state = { ...state, fontSize: action.payload};\r\n            return state;\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default EditorReducer;","const initialState = {\r\n    editorText : \"\",\r\n    savedText : \"\"\r\n}\r\n\r\nconst ResultReducer = (state = initialState, action) => {\r\n    switch(action.type){\r\n        case \"EDITOR_TEXT\":\r\n            state = {...state, editorText: action.payload}\r\n            return state;\r\n        case \"SAVE_TEXT\":\r\n            state = {...state, savedText: state.editorText}\r\n            return state;\r\n        default:\r\n            return state;\r\n    }\r\n}\r\n\r\nexport default ResultReducer; ","import EditorReducer from \"./EditorReducer\";\r\nimport ResultReducer from \"./ResultReducer\";\r\n\r\nimport { combineReducers } from 'redux';\r\n\r\nconst rootReducer = combineReducers({\r\n    editorSettings: EditorReducer,\r\n    result: ResultReducer\r\n})\r\n\r\nexport default rootReducer;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {Provider} from 'react-redux';\nimport {createStore, applyMiddleware} from 'redux';\nimport thunk from 'redux-thunk';\nimport rootReducer from './reducers';\nimport {composeWithDevTools} from 'redux-devtools-extension'\n\n// const store = createStore(rootReducer, applyMiddleware(thunk));\nconst store = createStore(rootReducer, composeWithDevTools(\n  applyMiddleware(thunk),\n  // other store enhancers if any\n))\n\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}